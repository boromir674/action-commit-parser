name: CI/CD Pipeline
# Continuous Integration / Continuous Delivery

# Triggers on all Branches and v* Tags

### Stress-Testing, with Multi-Factor Job Matrix, on: ###
# - tags v*
# - the 'stress-test' branch (GITHUB_REF_NAME == 'stress-test')


### Production PyPI Publish, pypi.org, on: ###
# - v* tags on 'master' branch only

### Staging/Test PyPI Publish, test.pypi.org, on: ###
## Test PyPI publish on: ##
# - v*-rc 'pre-release' tags on 'release' branch

### Dockerhub publish on ###
# - all branches and tags

on:
  push:
    branches:
      - "*"
      # exclude pushes to 'release' branch
      - '!release'
      - '!dev'
    tags:
      - "v*.*.*"
      - run-ci

env:
  ### STRESS TEST Job MATRIX ###
  FULL_MATRIX_STRATEGY: "{\"platform\": [\"ubuntu-latest\"], \"python-version\": [\"3.10\", \"3.11\", \"3.12\"]}"
  # Python 3.12 is in bugfix mode, same as 3.11 -> can start supporting 3.12 it
  UBUNTU_PY_STRATEGY: "{\"platform\": [\"ubuntu-latest\"], \"python-version\":[\"3.11\"]}"

  ##### JOB ON/OFF SWITCHES - Top/1st level overrides #####
  RUN_UNIT_TESTS: "false"
  RUN_LINT_CHECKS: "false"
  DOCKER_JOB_ON: "false"
  PUBLISH_ON_PYPI: "false"
  DOCS_ON: "true"
  DRAW_DEPENDENCIES: "false"
  ###############################

  ### DOCKER Job Policy ####
  # Override Docker Policy-dependent decision-making and
  # Accept any ALL (branch/build) to Publish to Dockerhub
  # if true, it will push image and ignore DOCKER_JOB_POLICY
  ALWAYS_BUILD_N_PUBLSIH_DOCKER: "false"

  DOCKER_JOB_POLICY: "CDeployment"
  # - CDeployment : Builds and Publishes only if Tests ran and passed
  # - CDelivery   : Builds and Publishes if Tests Passed or if Tests were Skipped
  ############################

  #### STATIC CODE ANALYSIS Job ####
  ALWAYS_LINT: "false"
  LINT_JOB_POLICY: '2'  # {2, 3}
  ## Python Runtime version to set the Job runner with ##
  STATIC_ANALYSIS_PY: "3.10"
  ## Pylint Minimum Acceptance Rating/Score ##
  PYLINT_SCORE_THRESHOLD: "8.2"

  #### DOCS Build/Test ####
  ALWAYS_DOCS: "false"
  DOCS_JOB_POLICY: '2'  # {2, 3}
  DOCS_BUILDER_RUNTIME: "3.10"

  #### CODE VISUALIZATION Job ####
  ALWAYS_CODE_VIZ: "false"
  CODE_VIZ_POLICY: '2'  # {2, 3}
  ##########################

jobs:
  # we use the below to read the workflow env vars and be able to use in "- if:" Job conditionals
  # now we can do -> if: ${{ needs.set_github_outputs.outputs.TESTS_ENABLED == 'true' }}
  # github does not have a way to simply do "- if: ${{ env.RUN_UNIT_TESTS == 'true' }} " !!
  set_github_outputs:
    name: Read Workflow Env Section Vars and set Github Outputs
    runs-on: ubuntu-latest
    steps:
      - name: Pass 'env' section variables to GITHUB_OUTPUT
        id: pass-env-to-output
        run: |
          # set the matrix strategy to Full Matrix Stress Test if on master/main or stress-test branch or any tag
          BRANCH_NAME=${GITHUB_REF_NAME}
          if [[ $BRANCH_NAME == "stress-test" || $GITHUB_REF == refs/tags/* ]]; then
            echo "matrix=$FULL_MATRIX_STRATEGY" >> $GITHUB_OUTPUT
          else
            echo "matrix=$UBUNTU_PY_STRATEGY" >> $GITHUB_OUTPUT
          fi
          echo "TESTS_ENABLED=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "PUBLISH_ON_PYPI=$PUBLISH_ON_PYPI" >> $GITHUB_OUTPUT
      ## Docker - Pipeline Settings ##
      - id: derive_docker_policy
        run: echo "POL=${{ (env.DOCKER_JOB_ON != 'true' && '0') || (env.ALWAYS_BUILD_N_PUBLSIH_DOCKER == 'true' && '1') || (env.DOCKER_JOB_POLICY == 'CDeployment' && '2') || (env.DOCKER_JOB_POLICY == 'CDelivery' && '3') }}" >> $GITHUB_OUTPUT
      ## Static Code Analysis - Pipeline Settings ##
      - id: derive_sqa_policy
        run: echo "POL=${{ (env.RUN_LINT_CHECKS != 'true' && '0') || (env.ALWAYS_LINT == 'true' && '1') || env.LINT_JOB_POLICY }}" >> $GITHUB_OUTPUT
      - id: read_sqa_py
        run: echo SQA_PY=${{ env.STATIC_ANALYSIS_PY }} >> $GITHUB_OUTPUT
      - id: read_pylint_baseline_score
        run: echo PYLINT_BASELINE_SCORE=${{ env.PYLINT_SCORE_THRESHOLD }} >> $GITHUB_OUTPUT
      ## Docs Build/Test - Pipeline Settings ##
      - id: derive_docs_policy
        run: echo "POL=${{ (env.DOCS_ON != 'true' && '0') || (env.ALWAYS_DOCS == 'true' && '1') || env.DOCS_JOB_POLICY }}" >> $GITHUB_OUTPUT
      - id: read_docs_py
        run: echo DOCS_PY=${{ env.DOCS_BUILDER_RUNTIME }} >> $GITHUB_OUTPUT
      ## Code Visualization - Pipeline Settings ##
      - id: derive_code_viz_policy
        run: echo "POL=${{ (env.DRAW_DEPENDENCIES != 'true' && '0') || (env.ALWAYS_CODE_VIZ == 'true' && '1') || env.CODE_VIZ_POLICY }}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.pass-env-to-output.outputs.matrix }}
      TESTS_ENABLED: ${{ steps.pass-env-to-output.outputs.TESTS_ENABLED }}
      PUBLISH_ON_PYPI: ${{ steps.pass-env-to-output.outputs.PUBLISH_ON_PYPI }}
    ## Docker - Pipeline Settings ##
      PIPE_DOCKER_POLICY: ${{ steps.derive_docker_policy.outputs.POL }}
    ## Static Code Analysis - Pipeline Settings ##
      PIPE_SQA_POLICY: ${{ steps.derive_sqa_policy.outputs.POL }}
      PIPE_SQA_PY: ${{ steps.read_sqa_py.outputs.SQA_PY }}
      PIPE_SQA_PYLINT_PASS_SCORE: ${{ steps.read_pylint_baseline_score.outputs.PYLINT_BASELINE_SCORE }}
    ## Docs Build/Test - Pipeline Settings ##
      PIPE_DOCS_POLICY: ${{ steps.derive_docs_policy.outputs.POL }}
      PIPE_DOCS_PY: ${{ steps.read_docs_py.outputs.DOCS_PY }}
    ## Code Visualization - Pipeline Settings ##
      PIPE_CODE_VIZ_POLICY: ${{ steps.derive_code_viz_policy.outputs.POL }}

  ### TEST Action in various End-2-End Scenarios ###
  test:
    uses: ./.github/workflows/ci_test.yml
    with:
      test_matrix: |
        {
          "test_data": [
            {
              "from_ref": "fa4179f22acd503331d78f79e14324c3b4f05153",
              "to_ref": "6b8a0707f43c895a7a180caee41b0aeb0a6bf77e",
              "expected_commits_array": [
                {"message": "[NEW] Action Commit Parser v0.2.0 Release"},
                {"message": "build(docs): pin griffe to 0.40.1, to prevent just released broken built creash our CI Docs Build"},
                {"message": "ci: reproduce docs build env using statically compiled pinned requirements"}
              ]
            },
            {
              "from_ref": "f53bd65c181f0c9a77dab6489d147033a8628d87",
              "to_ref": "335cb29b35ce66c030df077f6239fe5e46d96cec",
              "expected_commits_array": [
                {"message": "ci: switch from local action reference to 'dev' git ref"},
                {"message": "chore: clean code"},
                {"message": "ci(pipeline): disable CI Jobs designed for testing Python client Code, since offer Composite Action"}
              ]
            }
            {
              "from_ref": "6b8a070",
              "to_ref": "71da7d8",
              "expected_commits_array": [
                {"message": "ci(gh-release): pin Reusable Workflow to v1.10.0 for making Github Release"},
                {"message": "chore(gitignore): update gitignore with generated files during development"}
              ]
            }
          ]
        }


# TODO REPRODUCE THE case where a commit message has a single-quote character

# TODO EMULATE gh pr --body "MARKDOWN" generation with commit messages to test client use case doesn not break

# EG         run: echo "COMMITS_ARRAY=$(echo '${{ steps.commit_generator.outputs.commits_array }}' | jq -c '[.[0:-1] | .[].message]')" >> $GITHUB_EN

# EG         run: echo "COMMITS_ARRAY=$(echo '${{ toJSON(steps.commit_generator.outputs.commits_array) }}' | jq -c '[.[0:-1] | .[].message]')" >> $GITHUB_EN


  ### TEST Action in End-2-End Scenario, using Callable Test Workflows ###
  # test:
  #   uses: ./.github/workflows/_test_action.yml
  #   with:
  #     # TEST DATA: input refs with 2 commits in between -> yields 3 commits
  #     from_ref: fa4179f22acd503331d78f79e14324c3b4f05153  # v0.2.0
  #     to_ref: 6b8a0707f43c895a7a180caee41b0aeb0a6bf77e
  #     # TEST DATA: Expectations is JSON array of 3 commits
  #     expected_commits_array: '[{"message": "[NEW] Action Commit Parser v0.2.0 Release"},{"message": "build(docs): pin griffe to 0.40.1, to prevent just released broken built creash our CI Docs Build"},{"message": "ci: reproduce docs build env using statically compiled pinned requirements"}]'

# RUN TEST SUITE ON ALL PLATFORMS
  unit_tests:
    runs-on: ${{ matrix.platform }}
    needs: set_github_outputs
    if: ${{ needs.set_github_outputs.outputs.TESTS_ENABLED == 'true' }}
    strategy:
      matrix: ${{fromJSON(needs.set_github_outputs.outputs.matrix)}}
    env:
      WHEELS_PIP_DIR: "wheels-pip"
    steps:
      - run: echo "Platform -> ${{ matrix.platform }} , Python -> ${{ matrix.python-version }}"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip && python -m pip install tox==3.28 tox-gh-actions

      - uses: actions/checkout@v4

      - name: Pin 'Static Type Checking' Dependencies
        run: tox -vv -s false -e pin-deps -- -E typing

      - name: Do Type Checking
        run: tox -e type -vv -s false

      ###### TEST SUITE RUN against Edit and Sdist ######
      - name: Build and Test 'Edit' and 'Sdist' & Build Wheel(s)
        run: |
          set -o pipefail
          tox -vv -s false | tee test_output.log
        env:
          PLATFORM: ${{ matrix.platform }}
          BUILD_DEST: ${{ env.WHEELS_PIP_DIR }}

      - name: List Wheel(s) created for Distro and its Requirements
        run: ls -l ${{ env.WHEELS_PIP_DIR }}

      ### PARSE WHEEL File NAME ###
      - name: Extract Wheel Name and Size
        id: extract_wheel_info
        shell: bash
        run: |
          WHEEL_INFO=$(grep -E "Created wheel for" test_output.log | sed -E "s/.*filename=([^ ]+) size=([^ ]+) .*/\1 \2/")

          # extract file name
          WHEEL_NAME=$(echo $WHEEL_INFO | cut -d ' ' -f 1)
          echo "WHEEL_NAME=$WHEEL_NAME" >> $GITHUB_ENV

          # extract file size
          WHEEL_SIZE=$(echo $WHEEL_INFO | cut -d ' ' -f 2)
          echo "WHEEL_SIZE=$WHEEL_SIZE" >> $GITHUB_ENV

          # extract '1.12.5.dev0' from 'action_commit_parser-1.12.5.dev0-py3-none-any.whl'
          PEP_VERSION=$(echo $WHEEL_NAME | sed -E "s/action_commit_parser-([^ ]+)-py3-none-any.whl/\1/")

          echo "PEP_VERSION=${PEP_VERSION}" >> $GITHUB_OUTPUT

      - run: 'echo "WHEEL_NAME: $WHEEL_NAME SIZE: $WHEEL_SIZE"'
      - run: 'echo "PEP_VERSION: $PEP_VERSION"'

      # Crash Workflow if PEP_VERSION is not set
      - if: ${{ steps.extract_wheel_info.outputs.PEP_VERSION == '' }}
        run: exit 1

      ###### TEST SUITE RUN against Wheel ######
      - name: Run Test Suite Against Wheel
        run: tox -e wheel-test -s false
        env:
          PLATFORM: ${{ matrix.platform }}
          BUILD_DEST: ${{ env.WHEELS_PIP_DIR }}
          WHEEL: ${{ env.WHEEL_NAME }}

      ## Combine Coverage Data from Tests' Results ##
      - name: "Combine Coverage (dev, sdist, wheel) & make Reports"
        run: tox -e coverage --sitepackages -vv -s false

      - name: Rename Coverage Files
        shell: bash
        run: |
          mv ./.tox/coverage.xml ./coverage-${{ matrix.platform }}-${{ matrix.python-version }}.xml

      ## UPLOAD CI ARTIFACTS - Coverage Reports ##
      - name: "Upload Test Coverage as Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: all_coverage_raw
          path: coverage-${{ matrix.platform }}-${{ matrix.python-version }}.xml
          if-no-files-found: error

      - name: Check for compliance with Python Best Practices
        shell: bash
        env:
          PKG_VERSION: ${{ steps.extract_wheel_info.outputs.PEP_VERSION }}
          WHEEL_PATH: ${{ env.WHEELS_PIP_DIR }}/${{ env.WHEEL_NAME }}
        run: |
          DIST_DIR=dist
          echo "DIST_DIR=${DIST_DIR}" >> $GITHUB_ENV
          mkdir ${DIST_DIR}
          mv ".tox/${DIST_DIR}/action_commit_parser-${PKG_VERSION}.tar.gz" "${DIST_DIR}"
          mv "${{ env.WHEEL_PATH }}" "${DIST_DIR}"
          tox -e check -vv -s false

      ## UPLOAD CI ARTIFACTS - Distro Build(s), 1 sdist and 1 or more wheels ##
      - name: Upload Source & Wheel distributions as Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.platform }}-${{ matrix.python-version }}
          path: ${{ env.DIST_DIR }}
          if-no-files-found: error
    outputs:
      PEP_VERSION: ${{ steps.extract_wheel_info.outputs.PEP_VERSION }}

  codecov_coverage_host:
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
    - uses: actions/checkout@v4
    - name: Get Codecov binary
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
    - name: Download Raw Coverage Data Artefacts
      uses: actions/download-artifact@v3
      with:
        name: all_coverage_raw
    - name: Upload Coverage Reports to Codecov
      run: |
        for file in coverage*.xml; do
          OS_NAME=$(echo $file | sed -E "s/coverage-(\w\+)-/\1/")
          PY_VERSION=$(echo $file | sed -E "s/coverage-\w\+-(\d\.)\+/\1/")
          ./codecov -f $file -e "OS=$OS_NAME,PYTHON=$PY_VERSION" --flags unittests --verbose
          echo "Sent to Codecov: $file !"
        done

## DOCKER BUILD and PUBLISH ON DOCKERHUB ##
# Ref Page: https://automated-workflows.readthedocs.io/en/main/ref_docker/
  docker_build:
    needs: [set_github_outputs, unit_tests]
    uses: boromir674/automated-workflows/.github/workflows/docker.yml@v1.11.0
    if: always()
    with:
      acceptance_policy: ${{ needs.set_github_outputs.outputs.PIPE_DOCKER_POLICY }}
      image_slug: "action-commit-parser"
      # target_stage: "some_stage_alias"  # no stage, means no `--target` flag, on build
      tests_pass: ${{ needs.unit_tests.result == 'success' }}
      tests_run: ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.unit_tests.result) }}
      DOCKER_USER: ${{ vars.DOCKER_USER }}
    secrets:
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  ## JOB: Signal for Automated PyPI Upload ##
  check_which_git_branch_we_are_on:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    env:
      RELEASE_BR: ${{ vars.RELEASE_BRANCH || 'release' }}
      MAIN_BR: ${{ vars.MAIN_BRANCH || 'main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Check if '${{ github.ref }}' tag is on '${{ env.MAIN_BR }}' branch"
        uses: rickstaa/action-contains-tag@a9ff27d505ba2bf074a2ebb48b208e76d35ff308  # v1.2.10
        id: main_contains_tag
        with:
          reference: ${{ env.MAIN_BR }}
          tag: "${{ github.ref }}"

      - if: ${{ steps.main_contains_tag.outputs.retval != 'true' }}
        run: git branch --track "${{ env.RELEASE_BR }}" "origin/${{ env.RELEASE_BR }}"

      - name: "Check if '${{ github.ref }}' tag is on '${{ env.RELEASE_BR }}' branch"
        if: ${{ steps.main_contains_tag.outputs.retval != 'true' }}
        uses: rickstaa/action-contains-tag@a9ff27d505ba2bf074a2ebb48b208e76d35ff308  # v1.2.10
        id: release_contains_tag
        with:
          reference: ${{ env.RELEASE_BR }}
          tag: "${{ github.ref }}"

      - name: Pick Production or Test Environment, if tag on master or release branch respectively
        id: set_environment_name
        run: |
          DEPLOY=true
          if [[ "${{ steps.main_contains_tag.outputs.retval }}" == "true" ]]; then
            echo "ENVIRONMENT_NAME=PROD_DEPLOYMENT" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.release_contains_tag.outputs.retval }}" == "true" ]]; then
            echo "ENVIRONMENT_NAME=TEST_DEPLOYMENT" >> $GITHUB_OUTPUT
          else
            echo "A tag was pushed but not on master or release branch. No deployment will be done."
            DEPLOY=false
          fi
          echo "AUTOMATED_DEPLOY=$DEPLOY" >> $GITHUB_OUTPUT
    outputs:
      ENVIRONMENT_NAME: ${{ steps.set_environment_name.outputs.ENVIRONMENT_NAME }}
      AUTOMATED_DEPLOY: ${{ steps.set_environment_name.outputs.AUTOMATED_DEPLOY }}

  ## JOB: PYPI UPLOAD ##
  pypi_publish:
    needs: [set_github_outputs, unit_tests, check_which_git_branch_we_are_on]
    uses: boromir674/automated-workflows/.github/workflows/pypi_env.yml@8e97f596067fcbbaa0a6927ec1ee47dce4ab5f1a
    with:
      should_trigger: ${{ needs.set_github_outputs.outputs.PUBLISH_ON_PYPI == 'true' && needs.check_which_git_branch_we_are_on.outputs.AUTOMATED_DEPLOY == 'true' }}
      distro_name: cookiecutter_python
      distro_version: ${{ needs.unit_tests.outputs.PEP_VERSION }}
      pypi_env: '${{ needs.check_which_git_branch_we_are_on.outputs.ENVIRONMENT_NAME }}'
      artifacts_path: downloaded-artifacts

      require_wheel: true
      allow_existing: true
    secrets:
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

### STATIC CODE ANALYSIS & LINTING ###
  lint:
    name: Static Code Analysis
    needs: set_github_outputs
    uses: ./.github/workflows/policy_lint.yml
    with:
      run_policy: ${{ needs.set_github_outputs.outputs.PIPE_SQA_POLICY }}
      dedicated_branches: 'main, master, dev'
      source_code_targets: 'src,tests,scripts'
      python_version: ${{ needs.set_github_outputs.outputs.PIPE_SQA_PY }}
      pylint_threshold: ${{ needs.set_github_outputs.outputs.PIPE_SQA_PYLINT_PASS_SCORE }}

### DOCS BUILD/TEST - DOCUMENTATION SITE ###
  docs:
    name: Build Documentation
    needs: set_github_outputs
    uses: boromir674/automated-workflows/.github/workflows/policy_docs.yml@v1.3.0
    with:
      run_policy: '${{ needs.set_github_outputs.outputs.PIPE_DOCS_POLICY }}'
      python_version: ${{ needs.set_github_outputs.outputs.PIPE_DOCS_PY }}
      command: 'tox -s false -e pin-deps -- -E docs && tox -e docs --sitepackages -vv -s false'

### DRAW PYTHON DEPENDENCY GRAPHS ###
  code_visualization:
    needs: set_github_outputs
    name: Code Visualization of Python Imports as Graphs, in .svg
    uses: boromir674/automated-workflows/.github/workflows/python_imports.yml@v1.3.0
    with:
      run_policy: '${{ needs.set_github_outputs.outputs.PIPE_CODE_VIZ_POLICY }}'
      branches: 'main, master, dev'
      source_code_targets: 'src'
      python_version: '3.10'
      artifacts_dir: 'dependency-graphs'

### Make a Github Release ###
  gh_release:
    needs: [test, check_which_git_branch_we_are_on]
    if: ${{ needs.check_which_git_branch_we_are_on.outputs.AUTOMATED_DEPLOY == 'true' }}
    uses: boromir674/automated-workflows/.github/workflows/gh-release.yml@v1.10.0
    name: 'GH Release'
    with:
      tag: ${{ github.ref_name }}
      draft: ${{ needs.check_which_git_branch_we_are_on.outputs.ENVIRONMENT_NAME == 'TEST_DEPLOYMENT' }}
    secrets:
      # passing a PAT with Contents RW, is recommened to identify User as Actor, else 'github-actions' is default Actor
      gh_token: ${{ secrets.GH_TOKEN_CONTENT_RW }}


  ### Git Ops: Check PR Acceptance ###
  qa_signal:
    needs: [test, docs]
    uses: boromir674/automated-workflows/.github/workflows/go-single-status.yml@ffac270355ffe73cb8ab2bd2477ce6b20efca912  # v1.7.0
    with:
      needs_json: '${{ toJson(needs) }}'
